name: "Type System"
description: "Tests for FHIRPath type system including is, as, type(), ofType(), and type conversion functions"

tests:
  # is operator
  - name: "is operator with matching type"
    description: "Test is operator with matching type"
    difficulty: "basic"
    categories: ["type", "is", "operator"]
    expression: "name is string"
    expected: [true]
    fixture:
      name: "John Doe"

  - name: "is operator with non-matching type"
    description: "Test is operator with non-matching type"
    difficulty: "basic"
    categories: ["type", "is", "operator"]
    expression: "age is string"
    expected: [false]
    fixture:
      age: 30

  - name: "is operator with integer type"
    description: "Test is operator with integer type"
    difficulty: "basic"
    categories: ["type", "is", "operator"]
    expression: "age is integer"
    expected: [true]
    fixture:
      age: 30

  - name: "is operator with decimal type"
    description: "Test is operator with decimal type"
    difficulty: "basic"
    categories: ["type", "is", "operator"]
    expression: "weight is decimal"
    expected: [true]
    fixture:
      weight: 70.5

  - name: "is operator with boolean type"
    description: "Test is operator with boolean type"
    difficulty: "basic"
    categories: ["type", "is", "operator"]
    expression: "active is boolean"
    expected: [true]
    fixture:
      active: true

  - name: "is operator with date type"
    description: "Test is operator with date type"
    difficulty: "basic"
    categories: ["type", "is", "operator"]
    expression: "birthDate is date"
    expected: [true]
    fixture:
      birthDate: "@1990-01-01"

  - name: "is operator with datetime type"
    description: "Test is operator with datetime type"
    difficulty: "basic"
    categories: ["type", "is", "operator"]
    expression: "timestamp is dateTime"
    expected: [true]
    fixture:
      timestamp: "@2023-01-01T10:30:00Z"

  - name: "is operator with quantity type"
    description: "Test is operator with quantity type"
    difficulty: "basic"
    categories: ["type", "is", "operator"]
    expression: "dosage is Quantity"
    expected: [true]
    fixture:
      dosage: "5 'mg'"

  - name: "is operator with collection"
    description: "Test is operator applied to collection"
    difficulty: "intermediate"
    categories: ["type", "is", "collection"]
    expression: "names is string"
    expected: [true, false, true]
    fixture:
      names: ["John", 42, "Jane"]

  - name: "is operator with complex type"
    description: "Test is operator with complex FHIR type"
    difficulty: "intermediate"
    categories: ["type", "is", "complex"]
    expression: "name is HumanName"
    expected: [true]
    fixture:
      name:
        given: ["John"]
        family: "Doe"
        use: "official"

  # as operator
  - name: "as operator with compatible type"
    description: "Test as operator with compatible type conversion"
    difficulty: "intermediate"
    categories: ["type", "as", "operator"]
    expression: "numericString as integer"
    expected: [42]
    fixture:
      numericString: "42"

  - name: "as operator with incompatible type"
    description: "Test as operator with incompatible type conversion"
    difficulty: "intermediate"
    categories: ["type", "as", "operator"]
    expression: "textString as integer"
    expected: []
    fixture:
      textString: "not a number"

  - name: "as operator decimal to integer"
    description: "Test as operator converting decimal to integer"
    difficulty: "intermediate"
    categories: ["type", "as", "operator"]
    expression: "weight as integer"
    expected: [70]
    fixture:
      weight: 70.8

  - name: "as operator with collection"
    description: "Test as operator applied to collection"
    difficulty: "intermediate"
    categories: ["type", "as", "collection"]
    expression: "values as integer"
    expected: [1, 3]
    fixture:
      values: ["1", "not a number", "3"]

  - name: "as operator with complex type"
    description: "Test as operator with complex type casting"
    difficulty: "advanced"
    categories: ["type", "as", "complex"]
    expression: "polymorphicValue as Quantity"
    expected: ["5 'mg'"]
    fixture:
      polymorphicValue: "5 'mg'"

  # type() function
  - name: "type() function with string"
    description: "Test type() function with string value"
    difficulty: "basic"
    categories: ["type", "function", "typeof"]
    expression: "name.type()"
    expected: [{"name": "string", "namespace": "System"}]
    fixture:
      name: "John Doe"

  - name: "type() function with integer"
    description: "Test type() function with integer value"
    difficulty: "basic"
    categories: ["type", "function", "typeof"]
    expression: "age.type()"
    expected: [{"name": "integer", "namespace": "System"}]
    fixture:
      age: 30

  - name: "type() function with decimal"
    description: "Test type() function with decimal value"
    difficulty: "basic"
    categories: ["type", "function", "typeof"]
    expression: "weight.type()"
    expected: [{"name": "decimal", "namespace": "System"}]
    fixture:
      weight: 70.5

  - name: "type() function with boolean"
    description: "Test type() function with boolean value"
    difficulty: "basic"
    categories: ["type", "function", "typeof"]
    expression: "active.type()"
    expected: [{"name": "boolean", "namespace": "System"}]
    fixture:
      active: true

  - name: "type() function with date"
    description: "Test type() function with date value"
    difficulty: "basic"
    categories: ["type", "function", "typeof"]
    expression: "birthDate.type()"
    expected: [{"name": "date", "namespace": "System"}]
    fixture:
      birthDate: "@1990-01-01"

  - name: "type() function with collection"
    description: "Test type() function with collection"
    difficulty: "intermediate"
    categories: ["type", "function", "collection"]
    expression: "values.type()"
    expected: [{"name": "string", "namespace": "System"}, {"name": "integer", "namespace": "System"}]
    fixture:
      values: ["text", 42]

  - name: "type() function with FHIR type"
    description: "Test type() function with FHIR resource type"
    difficulty: "intermediate"
    categories: ["type", "function", "fhir"]
    expression: "patient.type()"
    expected: [{"name": "Patient", "namespace": "FHIR"}]
    fixture:
      patient:
        resourceType: "Patient"
        name:
          given: ["John"]
          family: "Doe"

  # ofType() function
  - name: "ofType() with matching type"
    description: "Test ofType() function with matching type"
    difficulty: "intermediate"
    categories: ["type", "function", "oftype"]
    expression: "values.ofType(string)"
    expected: ["John", "Jane"]
    fixture:
      values: ["John", 42, "Jane", true]

  - name: "ofType() with no matches"
    description: "Test ofType() function with no matching types"
    difficulty: "intermediate"
    categories: ["type", "function", "oftype"]
    expression: "values.ofType(date)"
    expected: []
    fixture:
      values: ["John", 42, "Jane", true]

  - name: "ofType() with integer type"
    description: "Test ofType() function filtering integers"
    difficulty: "intermediate"
    categories: ["type", "function", "oftype"]
    expression: "values.ofType(integer)"
    expected: [42, 100]
    fixture:
      values: ["John", 42, "Jane", 100, true]

  - name: "ofType() with FHIR type"
    description: "Test ofType() function with FHIR resource type"
    difficulty: "advanced"
    categories: ["type", "function", "fhir"]
    expression: "resources.ofType(Patient)"
    expected: [{"resourceType": "Patient", "name": "John"}]
    fixture:
      resources:
        - resourceType: "Patient"
          name: "John"
        - resourceType: "Observation"
          value: 120
        - resourceType: "Patient"
          name: "Jane"

  # Type conversion functions
  - name: "toInteger() conversion"
    description: "Test toInteger() type conversion function"
    difficulty: "intermediate"
    categories: ["type", "conversion", "integer"]
    expression: "stringValue.toInteger()"
    expected: [42]
    fixture:
      stringValue: "42"

  - name: "toInteger() with invalid string"
    description: "Test toInteger() with invalid string"
    difficulty: "intermediate"
    categories: ["type", "conversion", "error"]
    expression: "invalidString.toInteger()"
    expected: []
    fixture:
      invalidString: "not a number"

  - name: "toDecimal() conversion"
    description: "Test toDecimal() type conversion function"
    difficulty: "intermediate"
    categories: ["type", "conversion", "decimal"]
    expression: "stringValue.toDecimal()"
    expected: [3.14]
    fixture:
      stringValue: "3.14"

  - name: "toString() conversion"
    description: "Test toString() type conversion function"
    difficulty: "basic"
    categories: ["type", "conversion", "string"]
    expression: "numericValue.toString()"
    expected: ["42"]
    fixture:
      numericValue: 42

  - name: "toBoolean() conversion"
    description: "Test toBoolean() type conversion function"
    difficulty: "intermediate"
    categories: ["type", "conversion", "boolean"]
    expression: "stringValue.toBoolean()"
    expected: [true]
    fixture:
      stringValue: "true"

  - name: "toDate() conversion"
    description: "Test toDate() type conversion function"
    difficulty: "intermediate"
    categories: ["type", "conversion", "date"]
    expression: "stringValue.toDate()"
    expected: ["@1990-01-01"]
    fixture:
      stringValue: "1990-01-01"

  - name: "toDateTime() conversion"
    description: "Test toDateTime() type conversion function"
    difficulty: "intermediate"
    categories: ["type", "conversion", "datetime"]
    expression: "stringValue.toDateTime()"
    expected: ["@2023-01-01T10:30:00Z"]
    fixture:
      stringValue: "2023-01-01T10:30:00Z"

  # Conversion check functions
  - name: "convertsToInteger() check"
    description: "Test convertsToInteger() check function"
    difficulty: "intermediate"
    categories: ["type", "check", "integer"]
    expression: "values.convertsToInteger()"
    expected: [true, false, true]
    fixture:
      values: ["42", "not a number", "100"]

  - name: "convertsToDecimal() check"
    description: "Test convertsToDecimal() check function"
    difficulty: "intermediate"
    categories: ["type", "check", "decimal"]
    expression: "values.convertsToDecimal()"
    expected: [true, false, true]
    fixture:
      values: ["3.14", "not a number", "2.71"]

  - name: "convertsToString() check"
    description: "Test convertsToString() check function"
    difficulty: "basic"
    categories: ["type", "check", "string"]
    expression: "values.convertsToString()"
    expected: [true, true, true]
    fixture:
      values: [42, true, "text"]

  - name: "convertsToBoolean() check"
    description: "Test convertsToBoolean() check function"
    difficulty: "intermediate"
    categories: ["type", "check", "boolean"]
    expression: "values.convertsToBoolean()"
    expected: [true, false, true]
    fixture:
      values: ["true", "maybe", "false"]

  # Complex type scenarios
  - name: "Polymorphic type handling"
    description: "Test polymorphic type handling with is operator"
    difficulty: "advanced"
    categories: ["type", "polymorphic", "complex"]
    expression: "value is Quantity or value is string"
    expected: [true]
    fixture:
      value: "5 'mg'"

  - name: "Type-based filtering"
    description: "Test filtering based on type checks"
    difficulty: "advanced"
    categories: ["type", "filtering", "complex"]
    expression: "mixedValues.where($this is integer).sum()"
    expected: [142]
    fixture:
      mixedValues: [42, "text", 100, true]

  - name: "Type conversion in expressions"
    description: "Test type conversion within complex expressions"
    difficulty: "advanced"
    categories: ["type", "conversion", "complex"]
    expression: "stringNumbers.where(convertsToInteger()).select(toInteger()).sum()"
    expected: [150]
    fixture:
      stringNumbers: ["50", "not a number", "100", "invalid"]

  - name: "Nested type operations"
    description: "Test nested type operations"
    difficulty: "advanced"
    categories: ["type", "nested", "complex"]
    expression: "data.where(value is integer).select(value as integer).where($this > 50)"
    expected: [100, 75]
    fixture:
      data:
        - name: "item1"
          value: 100
        - name: "item2"  
          value: "text"
        - name: "item3"
          value: 75
        - name: "item4"
          value: 25

  # FHIR-specific type scenarios
  - name: "FHIR resource type checking"
    description: "Test FHIR resource type checking"
    difficulty: "advanced"
    categories: ["type", "fhir", "resource"]
    expression: "Bundle.entry.resource.where($this is Patient).count()"
    expected: [2]
    fixture:
      Bundle:
        entry:
          - resource:
              resourceType: "Patient"
              name: "John"
          - resource:
              resourceType: "Observation"
              value: 120
          - resource:
              resourceType: "Patient"
              name: "Jane"

  - name: "Extension type handling"
    description: "Test extension type handling"
    difficulty: "advanced"
    categories: ["type", "fhir", "extension"]
    expression: "Patient.extension.where(url = 'http://example.org/fhir/extension').value is string"
    expected: [true]
    fixture:
      Patient:
        name: "John Doe"
        extension:
          - url: "http://example.org/fhir/extension"
            valueString: "test value"

  # Error cases
  - name: "Invalid type in is operator"
    description: "Test invalid type in is operator"
    difficulty: "intermediate"
    categories: ["type", "error", "invalid"]
    expression: "value is NonExistentType"
    error:
      type: "semantic"
      message: "Unknown type: NonExistentType"
    fixture:
      value: "test"

  - name: "Type conversion overflow"
    description: "Test type conversion overflow scenario"
    difficulty: "advanced"
    categories: ["type", "error", "overflow"]
    expression: "largeString.toInteger()"
    error:
      type: "semantic"
      message: "Integer overflow in type conversion"
    fixture:
      largeString: "999999999999999999999999999999"

  - name: "Circular type reference"
    description: "Test handling of circular type references"
    difficulty: "advanced"
    categories: ["type", "error", "circular"]
    expression: "circularRef is ComplexType"
    error:
      type: "semantic"
      message: "Circular type reference detected"
    fixture:
      circularRef:
        self:
          nested:
            value: "test"